@using EcommerceTracker.Domain.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model EcommerceTracker.ViewModels.ReportViewModel

@{
    ViewBag.Title = "Reports";
    var serializerSettings = new JsonSerializerSettings {ContractResolver = new CamelCasePropertyNamesContractResolver()};
}

<h2 class="pb-3">Reports</h2>

@if (Model != null)
{
    <ul class="nav nav-pills pb-3">
        <li class="nav-item">
            @Html.ActionLink("Categories by Percentage", "Index", "Reports", 
                new { reportName = ReportType.CategoryPercentage.ToString() }, 
                new { @class = Model.ReportType == ReportType.CategoryPercentage ? "nav-link active" : "nav-link" })
        </li>
        <li class="nav-item">
            @Html.ActionLink("Purchases by Category", "Index", "Reports", 
                new { reportName = ReportType.PurchasesByCategory.ToString() }, 
                new { @class = Model.ReportType == ReportType.PurchasesByCategory ? "nav-link active" : "nav-link" })
        </li>
        <li class="nav-item">
            @Html.ActionLink("Purchases by Necessity", "Index", "Reports",
                new { reportName = ReportType.PurchasesByNecessityValue.ToString() },
                new { @class = Model.ReportType == ReportType.PurchasesByNecessityValue ? "nav-link active" : "nav-link" })
        </li>
    </ul>

    <button type="button" class="btn btn-link" data-toggle="collapse" href="#collapseFilters">Filters</button>
    <div class="collapse pt-3" id="collapseFilters">
        <div class="card">
            <div class="card-body">
                @using (Html.BeginForm())
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.StartDateFilter)
                        @Html.EditorFor(model => model.StartDateFilter, new { htmlAttributes = new { @class = "form-control mb-2 mr-sm-2 mb-sm-0 datepicker" } })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EndDateFilter)
                        @Html.EditorFor(model => model.EndDateFilter, new { htmlAttributes = new { @class = "form-control mb-2 mr-sm-2 mb-sm-0 datepicker" } })
                    </div>
                    if (Model.ShowCategoryFilter)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.CategoryCheckModels)
                            <div class="form-check form-check-inline">
                                @for (var i = 0; i < Model.CategoryCheckModels.Count; i++)
                                {
                                    <label class="form-check-label">
                                        @Html.HiddenFor(model => model.CategoryCheckModels[i].Id)
                                        @Html.EditorFor(model => model.CategoryCheckModels[i].Checked, new {htmlAttributes = new {@class = "form-check-input"}})
                                        @Html.DisplayFor(model => model.CategoryCheckModels[i].Name)
                                    </label>
                                }
                            </div>
                        </div>
                    }
                    if (Model.ShowNecessityValueFilter)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.NecessityValueCheckModels)
                            <div class="form-check form-check-inline">
                                @for (var i = 0; i < Model.NecessityValueCheckModels.Count; i++)
                                {
                                    <label class="form-check-label">
                                        @Html.HiddenFor(model => model.NecessityValueCheckModels[i].Id)
                                        @Html.EditorFor(model => model.NecessityValueCheckModels[i].Checked, new {htmlAttributes = new {@class = "form-check-input"}})
                                        @Html.DisplayFor(model => model.NecessityValueCheckModels[i].Name)
                                    </label>
                                }
                            </div>
                        </div>
                    }
                    <input type="submit" value="Filter" class="btn btn-primary" />
                }
            </div>
        </div>
    </div>

    <div id="report"><!-- Plotly chart will be drawn inside this DIV --></div>
    <script>
        (function() {
            var json = @Html.Raw(JsonConvert.SerializeObject(Model.Chart, serializerSettings));
            
            window.Plotly.newPlot('report', json.data, json.layout, { displayModeBar: false, scrollZoom: false, editable: false });

            window.onresize = function () {
                var report = $('#report');
                var update = {
                    width: report.width()
                };
                window.Plotly.relayout('report', update);
            };
        })();

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null)
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) 
                        url += '#' + hash[1];
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) 
                        url += '#' + hash[1];
                    return url;
                }
                else
                    return url;
            }
        }
    </script>
}
@if (Model == null) 
{
    <p class="h3">No reports could be generated or no purchases are being tracked!</p>
}

<script>
    $(document).ready(function() {
        $('.datepicker').datepicker({});
    });
</script>

@section Styles {
    <style>
        /* Set width on the form input elements since they're 100% wide by default */
        input,
        textarea {
            max-width: 280px;
        }

        select {
            max-width: 280px;
        }

        input.long-input {
            max-width: 560px;
        }
    </style>
}